# Generated by Django 4.2.7 on 2025-07-24 15:48

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone', models.CharField(help_text='尼日利亚手机号格式: +2348012345678', max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message='手机号格式: +2348012345678', regex='^\\+234[0-9]{10}$')])),
                ('country', models.CharField(choices=[('NG', 'Nigeria'), ('CM', 'Cameroon')], db_index=True, default='NG', max_length=2)),
                ('full_name', models.CharField(help_text='完整姓名', max_length=100)),
                ('kyc_status', models.CharField(choices=[('PENDING', '待审核'), ('APPROVED', '已通过'), ('REJECTED', '已拒绝'), ('EXPIRED', '已过期')], db_index=True, default='PENDING', max_length=20)),
                ('kyc_submitted_at', models.DateTimeField(blank=True, null=True)),
                ('kyc_approved_at', models.DateTimeField(blank=True, null=True)),
                ('vip_level', models.IntegerField(choices=[(0, 'VIP0'), (1, 'VIP1'), (2, 'VIP2'), (3, 'VIP3'), (4, 'VIP4'), (5, 'VIP5'), (6, 'VIP6'), (7, 'VIP7')], db_index=True, default=0)),
                ('total_turnover', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='累计有效流水', max_digits=15)),
                ('referral_code', models.CharField(db_index=True, help_text='推荐码(8位字母数字组合)', max_length=20, unique=True)),
                ('login_attempts', models.IntegerField(default=0)),
                ('locked_until', models.DateTimeField(blank=True, null=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('referred_by', models.ForeignKey(blank=True, help_text='推荐人', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='referrals', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1, null=True)),
                ('address', models.TextField(blank=True)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('language', models.CharField(choices=[('en', 'English'), ('fr', 'French')], default='en', max_length=5)),
                ('timezone', models.CharField(default='Africa/Lagos', max_length=50)),
                ('email_notifications', models.BooleanField(default=True)),
                ('sms_notifications', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='LoginLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('success', models.BooleanField()),
                ('failure_reason', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='login_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'login_logs',
                'indexes': [models.Index(fields=['user', 'created_at'], name='login_logs_user_id_783da5_idx'), models.Index(fields=['ip_address', 'created_at'], name='login_logs_ip_addr_b15234_idx'), models.Index(fields=['success', 'created_at'], name='login_logs_success_b9ed28_idx')],
            },
        ),
        migrations.CreateModel(
            name='KYCDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('document_type', models.CharField(choices=[('NIN', 'National ID Number'), ('PASSPORT', 'International Passport'), ('DRIVERS_LICENSE', "Driver's License"), ('VOTERS_CARD', "Voter's Card")], max_length=20)),
                ('document_number', models.CharField(max_length=50)),
                ('front_image', models.ImageField(upload_to='kyc/documents/')),
                ('back_image', models.ImageField(blank=True, null=True, upload_to='kyc/documents/')),
                ('selfie_image', models.ImageField(upload_to='kyc/selfies/')),
                ('status', models.CharField(choices=[('PENDING', '待审核'), ('APPROVED', '已通过'), ('REJECTED', '已拒绝'), ('EXPIRED', '已过期')], default='PENDING', max_length=20)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('ocr_data', models.JSONField(blank=True, null=True)),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_kyc_documents', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kyc_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'kyc_documents',
                'indexes': [models.Index(fields=['user', 'status'], name='kyc_documen_user_id_19faeb_idx'), models.Index(fields=['document_type', 'status'], name='kyc_documen_documen_fac7a9_idx'), models.Index(fields=['created_at'], name='kyc_documen_created_4f4505_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['phone', 'is_active'], name='users_phone_0047fe_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['vip_level', 'total_turnover'], name='users_vip_lev_e55cd0_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['referral_code'], name='users_referra_98b351_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['country', 'is_active'], name='users_country_3b2ec3_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['kyc_status'], name='users_kyc_sta_4052e1_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_created_6541e9_idx'),
        ),
    ]
